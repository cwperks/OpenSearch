apply plugin: 'opensearch.build'
apply plugin: 'opensearch.publish'

base {
  archivesName = 'opensearch-agent'
}

configurations {
  bootstrap.extendsFrom(implementation)
}

dependencies {
  implementation project(":libs:agent-sm:bootstrap")
  implementation "net.bytebuddy:byte-buddy:${versions.bytebuddy}"
  compileOnly "com.google.code.findbugs:jsr305:3.0.2"
  implementation "org.apache.logging.log4j:log4j-core:${versions.log4j}"
  implementation "org.apache.logging.log4j:log4j-api:${versions.log4j}"
  testImplementation "junit:junit:${versions.junit}"
  testImplementation "org.hamcrest:hamcrest:${versions.hamcrest}"
}

var bootClasspath = configurations.bootstrap.incoming.artifactView { }.files
  .getFiles()
  .collect { it.name }

jar {
  manifest {
    attributes(
      "Can-Redefine-Classes": "true",
      "Can-Retransform-Classes": "true",
      "Agent-Class": "org.opensearch.javaagent.Agent",
      "Premain-Class": "org.opensearch.javaagent.Agent",
      "Boot-Class-Path":  bootClasspath.join(' ')
    )
  }
}

compileJava {
  options.compilerArgs -= '-Werror'
}

testingConventions.enabled = false
tasks.named('forbiddenApisTest').configure { onlyIf { false } }

tasks.named('forbiddenApisMain').configure {
  replaceSignatureFiles 'jdk-signatures'
  onlyIf { false }
}

task prepareAgent(type: Copy) {
  from(configurations.runtimeClasspath)
  into "$buildDir/distributions"
  dependsOn jar
}

thirdPartyAudit {
  ignoreMissingClasses(
    'com.sun.jna.FunctionMapper',
    'com.sun.jna.JNIEnv',
    'com.sun.jna.Library',
    'com.sun.jna.Native',
    'com.sun.jna.NativeLibrary',
    'com.sun.jna.Platform',

    // from log4j
    'com.conversantmedia.util.concurrent.SpinPolicy',
    'com.fasterxml.jackson.annotation.JsonInclude$Include',
    'com.fasterxml.jackson.databind.DeserializationContext',
    'com.fasterxml.jackson.databind.DeserializationFeature',
    'com.fasterxml.jackson.databind.JsonMappingException',
    'com.fasterxml.jackson.databind.JsonNode',
    'com.fasterxml.jackson.databind.Module$SetupContext',
    'com.fasterxml.jackson.databind.ObjectReader',
    'com.fasterxml.jackson.databind.ObjectWriter',
    'com.fasterxml.jackson.databind.SerializerProvider',
    'com.fasterxml.jackson.databind.deser.std.StdDeserializer',
    'com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer',
    'com.fasterxml.jackson.databind.module.SimpleModule',
    'com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter',
    'com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider',
    'com.fasterxml.jackson.databind.ser.std.StdScalarSerializer',
    'com.fasterxml.jackson.databind.ser.std.StdSerializer',
    'com.fasterxml.jackson.dataformat.xml.JacksonXmlModule',
    'com.fasterxml.jackson.dataformat.xml.XmlMapper',
    'com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter',
    'org.fusesource.jansi.Ansi',
    'org.fusesource.jansi.AnsiRenderer$Code',
    'com.lmax.disruptor.EventFactory',
    'com.lmax.disruptor.EventTranslator',
    'com.lmax.disruptor.EventTranslatorTwoArg',
    'com.lmax.disruptor.EventTranslatorVararg',
    'com.lmax.disruptor.ExceptionHandler',
    'com.lmax.disruptor.LifecycleAware',
    'com.lmax.disruptor.RingBuffer',
    'com.lmax.disruptor.Sequence',
    'com.lmax.disruptor.SequenceReportingEventHandler',
    'com.lmax.disruptor.WaitStrategy',
    'com.lmax.disruptor.dsl.Disruptor',
    'com.lmax.disruptor.dsl.ProducerType',
    'javax.jms.Connection',
    'javax.jms.ConnectionFactory',
    'javax.jms.Destination',
    'javax.jms.JMSException',
    'javax.jms.MapMessage',
    'javax.jms.Message',
    'javax.jms.MessageConsumer',
    'javax.jms.MessageProducer',
    'javax.jms.Session',
    'javax.mail.Authenticator',
    'javax.mail.Message$RecipientType',
    'javax.mail.PasswordAuthentication',
    'javax.mail.Session',
    'javax.mail.Transport',
    'javax.mail.internet.InternetAddress',
    'javax.mail.internet.InternetHeaders',
    'javax.mail.internet.MimeMessage',
    'javax.mail.internet.MimeMultipart',
    'javax.mail.internet.MimeUtility',
    'org.apache.commons.compress.compressors.CompressorStreamFactory',
    'org.apache.commons.compress.utils.IOUtils',
    'org.apache.commons.csv.CSVFormat',
    'org.apache.commons.csv.QuoteMode',
    'org.apache.kafka.clients.producer.Producer',
    'org.apache.kafka.clients.producer.RecordMetadata',
    'org.codehaus.stax2.XMLStreamWriter2',
    'org.jctools.queues.MpscArrayQueue',
    'org.osgi.framework.Bundle',
    'org.osgi.framework.BundleActivator',
    'org.osgi.framework.BundleContext',
    'org.osgi.framework.BundleEvent',
    'org.osgi.framework.BundleReference',
    'org.osgi.framework.FrameworkUtil',
    'org.osgi.framework.ServiceRegistration',
    'org.osgi.framework.SynchronousBundleListener',
    'org.osgi.framework.wiring.BundleWire',
    'org.osgi.framework.wiring.BundleWiring',
    'org.zeromq.ZMQ$Context',
    'org.zeromq.ZMQ$Socket',
    'org.zeromq.ZMQ',
    'org.zeromq.SocketType',
    'org.zeromq.ZContext',
    'org.zeromq.ZMonitor',
    'org.zeromq.ZMonitor$Event',
    'org.zeromq.ZMonitor$ZEvent',
    'com.fasterxml.jackson.core.JsonGenerator',
    'com.fasterxml.jackson.core.JsonParser',
    'com.fasterxml.jackson.core.JsonParser$Feature',
    'com.fasterxml.jackson.core.JsonToken',
    'com.fasterxml.jackson.core.PrettyPrinter',
    'com.fasterxml.jackson.core.type.TypeReference',
    'com.fasterxml.jackson.databind.ObjectMapper',
    'com.fasterxml.jackson.dataformat.yaml.YAMLMapper',
    'com.lmax.disruptor.SequenceBarrier',
    'com.lmax.disruptor.TimeoutException',
    'org.apache.kafka.common.serialization.ByteArraySerializer',
    'org.osgi.framework.ServiceReference'
  )

  ignoreViolations(
    'org.apache.logging.log4j.core.util.internal.UnsafeUtil',
    'org.apache.logging.log4j.core.util.internal.UnsafeUtil$1',
  )
}

tasks.named('generateMetadataFileForNebulaPublication') {
  dependsOn prepareAgent
}

tasks.named('validateNebulaPom') {
  dependsOn prepareAgent
}

tasks.test {
  dependsOn prepareAgent
  jvmArgs += ["-javaagent:" + project.jar.archiveFile.get()]
}

tasks.check {
  dependsOn test
}

tasks.named('assemble') {
  dependsOn prepareAgent
}
